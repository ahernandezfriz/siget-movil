const pool=require("./db"),dropOldTableIfExists="DROP TABLE IF EXISTS Pacientes CASCADE;",createPacientesTable="\n  CREATE TABLE Pacientes (\n      id SERIAL PRIMARY KEY,\n      nombre_completo VARCHAR(255) NOT NULL,\n      rut VARCHAR(12) NOT NULL UNIQUE,\n      fecha_nacimiento DATE,\n      nombre_apoderado VARCHAR(255),\n      telefono_apoderado VARCHAR(20),\n      email_apoderado VARCHAR(255),\n      profesional_id INTEGER NOT NULL REFERENCES Profesionales(id),\n      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n  );\n",createRegistrosTable="\n  CREATE TABLE Registros_Academicos (\n      id SERIAL PRIMARY KEY,\n      paciente_id INTEGER NOT NULL REFERENCES Pacientes(id) ON DELETE CASCADE,\n      profesional_id INTEGER NOT NULL REFERENCES Profesionales(id),\n      año INTEGER NOT NULL,\n      curso VARCHAR(100) NOT NULL,\n      diagnostico TEXT,\n      fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n  );\n";async function initializeDatabase(){const client=await pool.connect();try{await client.query("BEGIN"),console.log("-> Eliminando tabla 'Pacientes' antigua si existe..."),await client.query(dropOldTableIfExists),console.log("✅ Tabla antigua eliminada."),console.log("-> Creando tabla 'Pacientes' (Ficha Personal)..."),await client.query(createPacientesTable),console.log("✅ Tabla 'Pacientes' creada exitosamente."),console.log("-> Creando tabla 'Registros_Academicos' (Historial)..."),await client.query(createRegistrosTable),console.log("✅ Tabla 'Registros_Academicos' creada exitosamente."),await client.query("COMMIT"),console.log("\n¡Base de datos escolar inicializada correctamente!")}catch(err){await client.query("ROLLBACK"),console.error("❌ Error durante la inicialización de la base de datos:",err)}finally{client.release(),pool.end()}}initializeDatabase();