const pool=require("../db"),puppeteer=require("puppeteer"),updateAcademicRecord=async(req,res)=>{const{id:id}=req.params,{"año":año,curso:curso,diagnostico:diagnostico}=req.body,profesional_id=req.user.id;try{const query="\n            UPDATE Registros_Academicos SET\n                año = COALESCE($1, año),\n                curso = COALESCE($2, curso),\n                diagnostico = COALESCE($3, diagnostico)\n            WHERE id = $4 AND profesional_id = $5\n            RETURNING *;\n        ",updatedRecord=await pool.query(query,[año,curso,diagnostico,id,profesional_id]);if(0===updatedRecord.rows.length)return res.status(404).json({error:"Registro no encontrado o no pertenece a este profesional."});res.status(200).json(updatedRecord.rows[0])}catch(err){console.error("Error al actualizar registro:",err),res.status(500).json({error:"Error interno del servidor."})}},deleteAcademicRecord=async(req,res)=>{const{id:id}=req.params,profesional_id=req.user.id;try{const query="DELETE FROM Registros_Academicos WHERE id = $1 AND profesional_id = $2 RETURNING *;",deletedRecord=await pool.query(query,[id,profesional_id]);if(0===deletedRecord.rows.length)return res.status(404).json({error:"Registro no encontrado o no pertenece a este profesional."});res.status(200).json({message:`Registro del año ${deletedRecord.rows[0].año} eliminado.`})}catch(err){console.error("Error al eliminar registro:",err),res.status(500).json({error:"Error interno del servidor."})}},exportRecordToPdf=async(req,res)=>{const{id:recordId}=req.params,profesional_id=req.user.id;try{const recordQuery="\n            SELECT ra.año, ra.curso, ra.diagnostico,\n                   p.nombre_completo as paciente_nombre, p.rut as paciente_rut,\n                   pr.nombre_completo as profesional_nombre\n            FROM Registros_Academicos ra\n            JOIN Pacientes p ON ra.paciente_id = p.id\n            JOIN Profesionales pr ON ra.profesional_id = pr.id\n            WHERE ra.id = $1 AND ra.profesional_id = $2;\n        ",recordResult=await pool.query(recordQuery,[recordId,profesional_id]);if(0===recordResult.rows.length)return res.status(404).json({error:"Registro no encontrado o no autorizado."});const recordData=recordResult.rows[0],sessionsQuery="\n            SELECT s.id, s.fecha_sesion, s.observaciones,\n                   (SELECT json_agg(act.*) FROM Actividades act WHERE act.sesion_id = s.id) as actividades\n            FROM Sesiones s\n            WHERE s.registro_id = $1\n            ORDER BY s.fecha_sesion ASC;\n        ",sessionsResult=await pool.query(sessionsQuery,[recordId]),sessionsData=sessionsResult.rows;let sessionsHtml="";sessionsData.forEach(session=>{let activitiesHtml="";session.actividades?session.actividades.forEach(act=>{activitiesHtml+=`<tr><td>${act.descripcion_actividad}</td><td>${act.evaluacion}/5</td></tr>`}):activitiesHtml='<tr><td colspan="2">No hay actividades registradas.</td></tr>',sessionsHtml+=`\n                <div class="session-block">\n                    <h4>Sesión del ${new Date(session.fecha_sesion).toLocaleDateString("es-CL")}</h4>\n                    <p><strong>Observaciones:</strong> ${session.observaciones||"N/A"}</p>\n                    <table>\n                        <thead><tr><th>Actividad</th><th>Evaluación</th></tr></thead>\n                        <tbody>${activitiesHtml}</tbody>\n                    </table>\n                </div>\n            `});const htmlContent=`\n            <!DOCTYPE html><html><head><title>Reporte Consolidado</title><style>\n                body { font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333; }\n                .container { width: 90%; margin: auto; }\n                h1 { color: #4a4a4a; border-bottom: 2px solid #4a90e2; padding-bottom: 10px; }\n                .session-block { border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin-bottom: 20px; page-break-inside: avoid; }\n                table { width: 100%; border-collapse: collapse; margin-top: 10px; }\n                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n                th { background-color: #f2f2f2; }\n                .footer { text-align: center; margin-top: 30px; font-size: 0.8em; color: #777; }\n            </style></head><body>\n                <div class="container">\n                    <h1>Reporte Consolidado</h1>\n                    <p><strong>Paciente:</strong> ${recordData.paciente_nombre} (${recordData.paciente_rut})</p>\n                    <p><strong>Profesional:</strong> ${recordData.profesional_nombre}</p>\n                    <p><strong>Período Académico:</strong> ${recordData.año} (${recordData.curso})</p>\n                    <hr>\n                    ${sessionsHtml||"<p>No hay sesiones registradas en este período.</p>"}\n                </div>\n                <div class="footer">Reporte generado por SIGET Móvil &copy; ${(new Date).getFullYear()}</div>\n            </body></html>\n        `,browser=await puppeteer.launch({headless:!0,args:["--no-sandbox"]}),page=await browser.newPage();await page.setContent(htmlContent,{waitUntil:"networkidle0"});const pdfBuffer=await page.pdf({format:"A4",printBackground:!0});await browser.close(),res.set({"Content-Type":"application/pdf","Content-Length":pdfBuffer.length,"Content-Disposition":`attachment; filename="consolidado-${recordId}.pdf"`}),res.send(pdfBuffer)}catch(err){console.error("Error al generar el PDF consolidado:",err),res.status(500).json({error:"Error interno al generar el PDF."})}};module.exports={updateAcademicRecord:updateAcademicRecord,deleteAcademicRecord:deleteAcademicRecord,exportRecordToPdf:exportRecordToPdf};