const pool=require("../db"),createPatientAndFirstRecord=async(req,res)=>{const{nombre_completo:nombre_completo,rut:rut,fecha_nacimiento:fecha_nacimiento,nombre_apoderado:nombre_apoderado,telefono_apoderado:telefono_apoderado,email_apoderado:email_apoderado}=req.body,{"año":año,curso:curso,diagnostico:diagnostico}=req.body,profesional_id=req.user.id;if(!(nombre_completo&&rut&&año&&curso))return res.status(400).json({error:"Nombre, RUT, año y curso son obligatorios."});const client=await pool.connect();try{let paciente;await client.query("BEGIN");const existingPatient=await client.query("SELECT * FROM Pacientes WHERE rut = $1",[rut]);if(existingPatient.rows.length>0)paciente=existingPatient.rows[0];else{const newPatientQuery="\n                INSERT INTO Pacientes (nombre_completo, rut, fecha_nacimiento, nombre_apoderado, telefono_apoderado, email_apoderado, profesional_id)\n                VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *;\n            ",newPatient=await client.query(newPatientQuery,[nombre_completo,rut,fecha_nacimiento,nombre_apoderado,telefono_apoderado,email_apoderado,profesional_id]);paciente=newPatient.rows[0]}const newRecordQuery="\n            INSERT INTO Registros_Academicos (paciente_id, profesional_id, año, curso, diagnostico)\n            VALUES ($1, $2, $3, $4, $5) RETURNING *;\n        ",newRecord=await client.query(newRecordQuery,[paciente.id,profesional_id,año,curso,diagnostico]);await client.query("COMMIT"),res.status(201).json({paciente:paciente,registro:newRecord.rows[0]})}catch(err){await client.query("ROLLBACK"),console.error("Error al crear paciente y registro:",err),res.status(500).json({error:"Error interno del servidor."})}finally{client.release()}},getMyCurrentPatients=async(req,res)=>{const profesional_id=req.user.id,currentYear=(new Date).getFullYear();try{const query="\n            SELECT p.id, p.nombre_completo, p.rut, ra.curso, ra.diagnostico, ra.año\n            FROM Pacientes p\n            JOIN Registros_Academicos ra ON p.id = ra.paciente_id\n            WHERE ra.profesional_id = $1 AND ra.año = $2\n            ORDER BY p.nombre_completo ASC;\n        ",patients=await pool.query(query,[profesional_id,currentYear]);res.status(200).json(patients.rows)}catch(err){console.error("Error al obtener pacientes actuales:",err),res.status(500).json({error:"Error interno del servidor."})}},getPatientHistory=async(req,res)=>{const{id:id}=req.params,profesional_id=req.user.id;try{const patientQuery="SELECT * FROM Pacientes WHERE id = $1",recordsQuery="SELECT * FROM Registros_Academicos WHERE paciente_id = $1 ORDER BY año DESC",patientRes=await pool.query(patientQuery,[id]);if(0===patientRes.rows.length)return res.status(404).json({error:"Paciente no encontrado."});const recordsRes=await pool.query(recordsQuery,[id]);res.status(200).json({ficha_paciente:patientRes.rows[0],historial_academico:recordsRes.rows})}catch(err){console.error("Error al obtener historial del paciente:",err),res.status(500).json({error:"Error interno del servidor."})}},updatePatientDetails=async(req,res)=>{const{id:id}=req.params,{nombre_completo:nombre_completo,rut:rut,fecha_nacimiento:fecha_nacimiento,nombre_apoderado:nombre_apoderado,telefono_apoderado:telefono_apoderado,email_apoderado:email_apoderado}=req.body;try{const query="\n            UPDATE Pacientes SET\n                nombre_completo = COALESCE($1, nombre_completo),\n                rut = COALESCE($2, rut),\n                fecha_nacimiento = COALESCE($3, fecha_nacimiento),\n                nombre_apoderado = COALESCE($4, nombre_apoderado),\n                telefono_apoderado = COALESCE($5, telefono_apoderado),\n                email_apoderado = COALESCE($6, email_apoderado)\n            WHERE id = $7 RETURNING *;\n        ",updatedPatient=await pool.query(query,[nombre_completo,rut,fecha_nacimiento,nombre_apoderado,telefono_apoderado,email_apoderado,id]);if(0===updatedPatient.rows.length)return res.status(404).json({error:"Paciente no encontrado."});res.status(200).json(updatedPatient.rows[0])}catch(err){if("23505"===err.code)return res.status(409).json({error:"El RUT ya está en uso."});console.error("Error al actualizar la ficha del paciente:",err),res.status(500).json({error:"Error interno del servidor."})}},deletePatient=async(req,res)=>{const{id:id}=req.params;try{const deletedPatient=await pool.query("DELETE FROM Pacientes WHERE id = $1 RETURNING *;",[id]);if(0===deletedPatient.rows.length)return res.status(404).json({error:"Paciente no encontrado."});res.status(200).json({message:`Paciente '${deletedPatient.rows[0].nombre_completo}' y todo su historial han sido eliminados.`})}catch(err){console.error("Error al eliminar paciente:",err),res.status(500).json({error:"Error interno del servidor."})}},addAcademicRecord=async(req,res)=>{const{id:patientId}=req.params,{"año":año,curso:curso,diagnostico:diagnostico}=req.body,profesional_id=req.user.id;if(!año||!curso)return res.status(400).json({error:"Año y curso son obligatorios."});try{const existingRecord=await pool.query("SELECT id FROM Registros_Academicos WHERE paciente_id = $1 AND año = $2",[patientId,año]);if(existingRecord.rows.length>0)return res.status(409).json({error:`Ya existe un registro para este paciente en el año ${año}.`});const query="\n            INSERT INTO Registros_Academicos (paciente_id, profesional_id, año, curso, diagnostico)\n            VALUES ($1, $2, $3, $4, $5)\n            RETURNING *;\n        ",newRecord=await pool.query(query,[patientId,profesional_id,año,curso,diagnostico]);res.status(201).json(newRecord.rows[0])}catch(err){console.error("Error al añadir registro académico:",err),res.status(500).json({error:"Error interno del servidor."})}};module.exports={createPatientAndFirstRecord:createPatientAndFirstRecord,getMyCurrentPatients:getMyCurrentPatients,getPatientHistory:getPatientHistory,updatePatientDetails:updatePatientDetails,deletePatient:deletePatient,addAcademicRecord:addAcademicRecord};