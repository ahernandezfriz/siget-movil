const pool=require("../db"),puppeteer=require("puppeteer"),createSessionWithActivities=async(req,res)=>{const{recordId:recordId}=req.params,{fecha_sesion:fecha_sesion,observaciones:observaciones,actividades:actividades}=req.body;if(!fecha_sesion||!actividades||!Array.isArray(actividades)||0===actividades.length)return res.status(400).json({error:"Fecha y al menos una actividad son obligatorias."});const client=await pool.connect();try{const recordCheck=await client.query("SELECT id FROM Registros_Academicos WHERE id = $1 AND profesional_id = $2",[recordId,req.user.id]);if(0===recordCheck.rows.length)return res.status(404).json({error:"Registro académico no encontrado o no autorizado."});await client.query("BEGIN");const sesionQuery="\n            INSERT INTO Sesiones (registro_id, fecha_sesion, observaciones)\n            VALUES ($1, $2, $3) RETURNING *;\n        ",newSession=await client.query(sesionQuery,[recordId,fecha_sesion,observaciones]),sesionId=newSession.rows[0].id,actividadesInsertQuery="\n            INSERT INTO Actividades (sesion_id, descripcion_actividad, evaluacion)\n            SELECT $1, d.descripcion_actividad, d.evaluacion\n            FROM json_to_recordset($2) AS d(descripcion_actividad TEXT, evaluacion INTEGER);\n        ";await client.query(actividadesInsertQuery,[sesionId,JSON.stringify(actividades)]);const finalResult=await client.query("SELECT s.*,\n                (SELECT json_agg(a.*) FROM Actividades a WHERE a.sesion_id = s.id) as actividades\n             FROM Sesiones s WHERE s.id = $1",[sesionId]);await client.query("COMMIT"),res.status(201).json(finalResult.rows[0])}catch(err){await client.query("ROLLBACK"),console.error("Error al crear la sesión:",err),res.status(500).json({error:"Error interno del servidor."})}finally{client.release()}},getSessionsForRecord=async(req,res)=>{const{recordId:recordId}=req.params,profesional_id=req.user.id;try{const recordCheck=await pool.query("SELECT id FROM Registros_Academicos WHERE id = $1 AND profesional_id = $2",[recordId,profesional_id]);if(0===recordCheck.rows.length)return res.status(404).json({error:"Registro académico no encontrado o no autorizado."});const query="\n            SELECT s.*,\n                (SELECT json_agg(a.*) FROM Actividades a WHERE a.sesion_id = s.id) as actividades\n            FROM Sesiones s\n            WHERE s.registro_id = $1\n            ORDER BY s.fecha_sesion DESC;\n        ",sessions=await pool.query(query,[recordId]);res.status(200).json(sessions.rows)}catch(err){console.error("Error al obtener sesiones:",err),res.status(500).json({error:"Error interno del servidor."})}},deleteSession=async(req,res)=>{const{sessionId:sessionId}=req.params,profesional_id=req.user.id;try{const deleteQuery="\n            DELETE FROM Sesiones s\n            WHERE s.id = $1 AND EXISTS (\n                SELECT 1 FROM Registros_Academicos ra\n                WHERE ra.id = s.registro_id AND ra.profesional_id = $2\n            )\n            RETURNING *;\n        ",result=await pool.query(deleteQuery,[sessionId,profesional_id]);if(0===result.rows.length)return res.status(404).json({error:"Sesión no encontrada o no autorizada."});res.status(200).json({message:"Sesión y sus actividades han sido eliminadas."})}catch(err){console.error("Error al eliminar la sesión:",err),res.status(500).json({error:"Error interno del servidor."})}},updateSessionWithActivities=async(req,res)=>{const{sessionId:sessionId}=req.params,{fecha_sesion:fecha_sesion,observaciones:observaciones,actividades:actividades}=req.body,profesional_id=req.user.id;if(!fecha_sesion||!actividades||!Array.isArray(actividades))return res.status(400).json({error:"Fecha y un array de actividades son obligatorios."});const client=await pool.connect();try{const recordCheck=await client.query("SELECT 1 FROM Sesiones s\n             JOIN Registros_Academicos ra ON s.registro_id = ra.id\n             WHERE s.id = $1 AND ra.profesional_id = $2",[sessionId,profesional_id]);if(0===recordCheck.rows.length)return res.status(404).json({error:"Sesión no encontrada o no autorizada."});await client.query("BEGIN");const sesionQuery="\n            UPDATE Sesiones SET\n                fecha_sesion = $1,\n                observaciones = $2\n            WHERE id = $3 RETURNING *;\n        ";if(await client.query(sesionQuery,[fecha_sesion,observaciones,sessionId]),await client.query("DELETE FROM Actividades WHERE sesion_id = $1",[sessionId]),actividades.length>0){const actividadesInsertQuery="\n                INSERT INTO Actividades (sesion_id, descripcion_actividad, evaluacion)\n                SELECT $1, d.descripcion_actividad, d.evaluacion\n                FROM json_to_recordset($2) AS d(descripcion_actividad TEXT, evaluacion INTEGER);\n            ";await client.query(actividadesInsertQuery,[sessionId,JSON.stringify(actividades)])}const finalResult=await client.query("SELECT s.*,\n                (SELECT json_agg(a.*) FROM Actividades a WHERE a.sesion_id = s.id) as actividades\n             FROM Sesiones s WHERE s.id = $1",[sessionId]);await client.query("COMMIT"),res.status(200).json(finalResult.rows[0])}catch(err){await client.query("ROLLBACK"),console.error("Error al actualizar la sesión:",err),res.status(500).json({error:"Error interno del servidor."})}finally{client.release()}},exportSessionToPdf=async(req,res)=>{const{sessionId:sessionId}=req.params,profesional_id=req.user.id;console.log(`\n[PDF Sesión #${sessionId}] 1. Iniciando proceso de exportación.`);try{const query="\n            SELECT s.*,\n                   p.nombre_completo as paciente_nombre, p.rut as paciente_rut,\n                   pr.nombre_completo as profesional_nombre\n            FROM Sesiones s\n            JOIN Registros_Academicos ra ON s.registro_id = ra.id\n            JOIN Pacientes p ON ra.paciente_id = p.id\n            JOIN Profesionales pr ON ra.profesional_id = pr.id\n            WHERE s.id = $1 AND ra.profesional_id = $2;\n        ",sessionResult=await pool.query(query,[sessionId,profesional_id]);if(0===sessionResult.rows.length)return console.log(`[PDF Sesión #${sessionId}] Error: Sesión no encontrada o no autorizada.`),res.status(404).json({error:"Sesión no encontrada o no autorizada."});const sessionData=sessionResult.rows[0],activitiesResult=await pool.query("SELECT * FROM Actividades WHERE sesion_id = $1",[sessionId]),activitiesData=activitiesResult.rows;console.log(`[PDF Sesión #${sessionId}] 2. Datos obtenidos de la base de datos.`);const fechaFormateada=new Date(sessionData.fecha_sesion).toLocaleDateString("es-CL");let activitiesHtml="";activitiesData.forEach(act=>{activitiesHtml+=`<tr><td>${act.descripcion_actividad}</td><td>${act.evaluacion}/5</td></tr>`});const htmlContent=`<!DOCTYPE html>\n        <html lang="es">\n        <head>\n            <meta charset="UTF-8">\n            <title>Reporte de Sesión</title>\n            <style>\n                body { font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; color: #333; }\n                .container { width: 90%; margin: auto; }\n                h1 { color: #4a4a4a; border-bottom: 2px solid #4a90e2; padding-bottom: 10px; }\n                table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n                th { background-color: #f2f2f2; }\n                .footer { text-align: center; margin-top: 30px; font-size: 0.8em; color: #777; }\n            </style>\n        </head>\n        <body>\n            <div class="container">\n                <h1>Reporte de Sesión Individual</h1>\n                <p><strong>Paciente:</strong> ${sessionData.paciente_nombre} (${sessionData.paciente_rut})</p>\n                <p><strong>Profesional:</strong> ${sessionData.profesional_nombre}</p>\n                <p><strong>Fecha de la Sesión:</strong> ${fechaFormateada}</p>\n                <h2>Actividades Realizadas</h2>\n                <table>\n                    <thead><tr><th>Actividad</th><th>Evaluación</th></tr></thead>\n                    <tbody>${activitiesHtml}</tbody>\n                </table>\n                <h2>Observaciones</h2>\n                <p>${sessionData.observaciones||"Sin observaciones."}</p>\n            </div>\n            <div class="footer">Reporte generado por SIGET Móvil &copy; ${(new Date).getFullYear()}</div>\n        </body>\n        </html>`;console.log(`[PDF Sesión #${sessionId}] 3. Contenido HTML generado. A punto de lanzar Puppeteer...`);const browser=await puppeteer.launch({headless:!0,args:["--no-sandbox"]});console.log(`[PDF Sesión #${sessionId}] 4. Puppeteer lanzado. Creando nueva página...`);const page=await browser.newPage();console.log(`[PDF Sesión #${sessionId}] 5. Página creada. Estableciendo contenido...`),await page.setContent(htmlContent,{waitUntil:"networkidle0"}),console.log(`[PDF Sesión #${sessionId}] 6. Contenido establecido. Generando buffer del PDF...`);const pdfBuffer=await page.pdf({format:"A4",printBackground:!0});console.log(`[PDF Sesión #${sessionId}] 7. PDF generado. Enviando respuesta al cliente...`),await browser.close(),res.set({"Content-Type":"application/pdf","Content-Length":pdfBuffer.length,"Content-Disposition":`attachment; filename="reporte-sesion-${sessionId}.pdf"`}),res.send(pdfBuffer),console.log(`[PDF Sesión #${sessionId}] 8. ¡Proceso completado exitosamente!`)}catch(err){console.error(`[PDF Sesión #${sessionId}] ❌ ERROR ATRAPADO:`,err),res.status(500).json({error:"Error interno al generar el PDF."})}};module.exports={createSessionWithActivities:createSessionWithActivities,getSessionsForRecord:getSessionsForRecord,deleteSession:deleteSession,updateSessionWithActivities:updateSessionWithActivities,exportSessionToPdf:exportSessionToPdf};